// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult,
  DataSourceTemplate
} from "@graphprotocol/graph-ts";

export class InternalActorRegistered extends EthereumEvent {
  get params(): InternalActorRegistered__Params {
    return new InternalActorRegistered__Params(this);
  }
}

export class InternalActorRegistered__Params {
  _event: InternalActorRegistered;

  constructor(event: InternalActorRegistered) {
    this._event = event;
  }

  get _actor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CoGatewaySet extends EthereumEvent {
  get params(): CoGatewaySet__Params {
    return new CoGatewaySet__Params(this);
  }
}

export class CoGatewaySet__Params {
  _event: CoGatewaySet;

  constructor(event: CoGatewaySet) {
    this._event = event;
  }

  get _coGateway(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenHolderDataSource extends DataSourceTemplate {
}

export class Transfer extends EthereumEvent  {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UtilityBrandedToken extends SmartContract {
  static bind(address: Address): UtilityBrandedToken {
    return new UtilityBrandedToken("UtilityBrandedToken", address);
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): CallResult<boolean> {
    let result = super.tryCall("approve", [
      EthereumValue.fromAddress(_spender),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  isInternalActor(param0: Address): boolean {
    let result = super.call("isInternalActor", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isInternalActor(param0: Address): CallResult<boolean> {
    let result = super.tryCall("isInternalActor", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): CallResult<BigInt> {
    let result = super.tryCall("totalSupply", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  organization(): Address {
    let result = super.call("organization", []);

    return result[0].toAddress();
  }

  try_organization(): CallResult<Address> {
    let result = super.tryCall("organization", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_owner)]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): CallResult<BigInt> {
    let result = super.tryCall("balanceOf", [
      EthereumValue.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  coGateway(): Address {
    let result = super.call("coGateway", []);

    return result[0].toAddress();
  }

  try_coGateway(): CallResult<Address> {
    let result = super.tryCall("coGateway", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  decreaseSupply(_amount: BigInt): boolean {
    let result = super.call("decreaseSupply", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_decreaseSupply(_amount: BigInt): CallResult<boolean> {
    let result = super.tryCall("decreaseSupply", [
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_spender)
    ]);

    return result[0].toBigInt();
  }

  try_allowance(_owner: Address, _spender: Address): CallResult<BigInt> {
    let result = super.tryCall("allowance", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_spender)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  setCoGateway(_coGateway: Address): boolean {
    let result = super.call("setCoGateway", [
      EthereumValue.fromAddress(_coGateway)
    ]);

    return result[0].toBoolean();
  }

  try_setCoGateway(_coGateway: Address): CallResult<boolean> {
    let result = super.tryCall("setCoGateway", [
      EthereumValue.fromAddress(_coGateway)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  increaseSupply(_beneficiary: Address, _amount: BigInt): boolean {
    let result = super.call("increaseSupply", [
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_increaseSupply(
    _beneficiary: Address,
    _amount: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("increaseSupply", [
      EthereumValue.fromAddress(_beneficiary),
      EthereumValue.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  exists(account: Address): boolean {
    let result = super.call("exists", [EthereumValue.fromAddress(account)]);

    return result[0].toBoolean();
  }

  try_exists(account: Address): CallResult<boolean> {
    let result = super.tryCall("exists", [EthereumValue.fromAddress(account)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): CallResult<boolean> {
    let result = super.tryCall("transfer", [
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call("transferFrom", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): CallResult<boolean> {
    let result = super.tryCall("transferFrom", [
      EthereumValue.fromAddress(_from),
      EthereumValue.fromAddress(_to),
      EthereumValue.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseSupplyCall extends EthereumCall {
  get inputs(): DecreaseSupplyCall__Inputs {
    return new DecreaseSupplyCall__Inputs(this);
  }

  get outputs(): DecreaseSupplyCall__Outputs {
    return new DecreaseSupplyCall__Outputs(this);
  }
}

export class DecreaseSupplyCall__Inputs {
  _call: DecreaseSupplyCall;

  constructor(call: DecreaseSupplyCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecreaseSupplyCall__Outputs {
  _call: DecreaseSupplyCall;

  constructor(call: DecreaseSupplyCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _organization(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterInternalActorsCall extends EthereumCall {
  get inputs(): RegisterInternalActorsCall__Inputs {
    return new RegisterInternalActorsCall__Inputs(this);
  }

  get outputs(): RegisterInternalActorsCall__Outputs {
    return new RegisterInternalActorsCall__Outputs(this);
  }
}

export class RegisterInternalActorsCall__Inputs {
  _call: RegisterInternalActorsCall;

  constructor(call: RegisterInternalActorsCall) {
    this._call = call;
  }

  get _internalActors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RegisterInternalActorsCall__Outputs {
  _call: RegisterInternalActorsCall;

  constructor(call: RegisterInternalActorsCall) {
    this._call = call;
  }
}

export class SetCoGatewayCall extends EthereumCall {
  get inputs(): SetCoGatewayCall__Inputs {
    return new SetCoGatewayCall__Inputs(this);
  }

  get outputs(): SetCoGatewayCall__Outputs {
    return new SetCoGatewayCall__Outputs(this);
  }
}

export class SetCoGatewayCall__Inputs {
  _call: SetCoGatewayCall;

  constructor(call: SetCoGatewayCall) {
    this._call = call;
  }

  get _coGateway(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCoGatewayCall__Outputs {
  _call: SetCoGatewayCall;

  constructor(call: SetCoGatewayCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseSupplyCall extends EthereumCall {
  get inputs(): IncreaseSupplyCall__Inputs {
    return new IncreaseSupplyCall__Inputs(this);
  }

  get outputs(): IncreaseSupplyCall__Outputs {
    return new IncreaseSupplyCall__Outputs(this);
  }
}

export class IncreaseSupplyCall__Inputs {
  _call: IncreaseSupplyCall;

  constructor(call: IncreaseSupplyCall) {
    this._call = call;
  }

  get _beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseSupplyCall__Outputs {
  _call: IncreaseSupplyCall;

  constructor(call: IncreaseSupplyCall) {
    this._call = call;
  }

  get success_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExistsCall extends EthereumCall {
  get inputs(): ExistsCall__Inputs {
    return new ExistsCall__Inputs(this);
  }

  get outputs(): ExistsCall__Outputs {
    return new ExistsCall__Outputs(this);
  }
}

export class ExistsCall__Inputs {
  _call: ExistsCall;

  constructor(call: ExistsCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExistsCall__Outputs {
  _call: ExistsCall;

  constructor(call: ExistsCall) {
    this._call = call;
  }

  get exists_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
